// TaskFlow ‚Äî –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Fetch API (—á–∏—Å—Ç—ã–π, –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–¥)

const API_BASE = 'https://jsonplaceholder.typicode.com';

// ----------------- –£—Ç–∏–ª–∏—Ç—ã -----------------
function el(id) { return document.getElementById(id); }

function show(targetId, html, type = '') {
    const node = el(targetId);
    if (!node) return;
    node.innerHTML = `<span class="${type}">${html}</span>`;
}

async function safeJson(response) {
    if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    return response.json();
}

// ----------------- –ó–∞–¥–∞–Ω–∏–µ 1: GET -----------------
async function fetchGetRequest() {
    show('get-output', '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è GET –∑–∞–ø—Ä–æ—Å... <span class="loading"></span>');
    try {
        const res = await fetch(`${API_BASE}/posts/1`);
        const data = await safeJson(res);
        show('get-output', `
            ‚úÖ GET —É—Å–ø–µ—à–µ–Ω
            ID: ${data.id}
            –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${data.title}
            –¢–µ–ª–æ: ${data.body}
            UserId: ${data.userId}
        `, 'success');
    } catch (err) {
        show('get-output', `–û—à–∏–±–∫–∞ GET: ${err.message}`, 'error');
    }
}

async function fetchJsonData() {
    const out = el('get-output');
    const container = el('get-data');
    out.innerHTML = '–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π... <span class="loading"></span>';
    container.innerHTML = '';
    try {
        const res = await fetch(`${API_BASE}/users`);
        const users = await safeJson(res);
        out.innerHTML = `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`;
        users.forEach(u => {
            const card = document.createElement('div');
            card.className = 'user-card';
            card.innerHTML = `
                <h3>üë§ ${u.name}</h3>
                <div><strong>${u.username}</strong> ‚Äî ${u.email}</div>
                <div>${u.company?.name} ‚Ä¢ ${u.website}</div>
                <div>${u.address?.city}, ${u.address?.street}</div>
            `;
            container.appendChild(card);
        });
    } catch (err) {
        out.innerHTML = `<span class="error">–û—à–∏–±–∫–∞: ${err.message}</span>`;
    }
}

async function fetchWithError() {
    show('get-output', '–¢–µ—Å—Ç –æ—à–∏–±–∫–∏... <span class="loading"></span>');
    try {
        const res = await fetch(`${API_BASE}/invalid-endpoint`);
        const data = await safeJson(res);
        show('get-output', JSON.stringify(data, null, 2), 'success');
    } catch (err) {
        show('get-output', `–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${err.message}`, 'error');
    }
}

function setupGetRequests() {
    el('fetch-get').addEventListener('click', fetchGetRequest);
    el('fetch-json').addEventListener('click', fetchJsonData);
    el('fetch-error').addEventListener('click', fetchWithError);
}

// ----------------- –ó–∞–¥–∞–Ω–∏–µ 2: CRUD -----------------
async function fetchPostRequest() {
    show('crud-output', '–û—Ç–ø—Ä–∞–≤–∫–∞ POST... <span class="loading"></span>');
    try {
        const payload = { title: '–ù–æ–≤—ã–π –ø–æ—Å—Ç', body: '–¢–µ–ª–æ –ø–æ—Å—Ç–∞', userId: 1 };
        const res = await fetch(`${API_BASE}/posts`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
        const data = await safeJson(res);
        show('crud-output', `‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ—Å—Ç ID: ${data.id}`, 'success');
    } catch (err) {
        show('crud-output', `–û—à–∏–±–∫–∞ POST: ${err.message}`, 'error');
    }
}

async function fetchPutRequest() {
    show('crud-output', '–û—Ç–ø—Ä–∞–≤–∫–∞ PUT... <span class="loading"></span>');
    try {
        const payload = { id: 1, title: '–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫', body: '–ù–æ–≤–æ–µ —Ç–µ–ª–æ', userId: 1 };
        const res = await fetch(`${API_BASE}/posts/1`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
        const data = await safeJson(res);
        show('crud-output', `‚úÖ PUT –≤—ã–ø–æ–ª–Ω–µ–Ω: ${data.title}`, 'success');
    } catch (err) {
        show('crud-output', `–û—à–∏–±–∫–∞ PUT: ${err.message}`, 'error');
    }
}

async function fetchPatchRequest() {
    show('crud-output', '–û—Ç–ø—Ä–∞–≤–∫–∞ PATCH... <span class="loading"></span>');
    try {
        const payload = { title: '–ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ' };
        const res = await fetch(`${API_BASE}/posts/1`, {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
        const data = await safeJson(res);
        show('crud-output', `‚úÖ PATCH: ${data.title}`, 'success');
    } catch (err) {
        show('crud-output', `–û—à–∏–±–∫–∞ PATCH: ${err.message}`, 'error');
    }
}

async function fetchDeleteRequest() {
    show('crud-output', '–û—Ç–ø—Ä–∞–≤–∫–∞ DELETE... <span class="loading"></span>');
    try {
        const res = await fetch(`${API_BASE}/posts/1`, { method: 'DELETE' });
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        show('crud-output', `‚úÖ DELETE –≤—ã–ø–æ–ª–Ω–µ–Ω. –°—Ç–∞—Ç—É—Å: ${res.status}`, 'success');
    } catch (err) {
        show('crud-output', `–û—à–∏–±–∫–∞ DELETE: ${err.message}`, 'error');
    }
}

function setupCrudRequests() {
    el('fetch-post').addEventListener('click', fetchPostRequest);
    el('fetch-put').addEventListener('click', fetchPutRequest);
    el('fetch-patch').addEventListener('click', fetchPatchRequest);
    el('fetch-delete').addEventListener('click', fetchDeleteRequest);
}

// ----------------- –ó–∞–¥–∞–Ω–∏–µ 3: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã -----------------
async function fetchWithHeaders() {
    show('headers-output', '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏... <span class="loading"></span>');
    try {
        const res = await fetch(`${API_BASE}/posts`, {
            headers: {
                'X-App-Name': 'TaskFlow',
                'Accept': 'application/json'
            }
        });
        const data = await safeJson(res);
        show('headers-output', `‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: ${data.length}`, 'success');
    } catch (err) {
        show('headers-output', `–û—à–∏–±–∫–∞: ${err.message}`, 'error');
    }
}

async function fetchWithAuth() {
    show('headers-output', '–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏... <span class="loading"></span>');
    try {
        const token = btoa('user:pass');
        const res = await fetch(`${API_BASE}/posts/1`, {
            headers: { 'Authorization': `Basic ${token}` }
        });
        const data = await safeJson(res);
        show('headers-output', `‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ. –ü–æ—Å—Ç: ${data.title}`, 'success');
    } catch (err) {
        show('headers-output', `–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${err.message}`, 'error');
    }
}

async function fetchWithParams() {
    show('headers-output', '–ó–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏... <span class="loading"></span>');
    try {
        const url = new URL(`${API_BASE}/posts`);
        url.search = new URLSearchParams({ _limit: 5, _sort: 'id', _order: 'desc' }).toString();
        const res = await fetch(url);
        const posts = await safeJson(res);
        show('headers-output', `‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${posts.length} –ø–æ—Å—Ç–æ–≤. URL: ${url}`, 'success');
    } catch (err) {
        show('headers-output', `–û—à–∏–±–∫–∞: ${err.message}`, 'error');
    }
}

async function fetchWithTimeout() {
    const out = el('headers-output');
    out.innerHTML = '–¢–∞–π–º–∞—É—Ç 3s... <span class="loading"></span>';
    const controller = new AbortController();
    const id = setTimeout(() => controller.abort(), 3000);

    try {
        const res = await fetch(`${API_BASE}/posts`, { signal: controller.signal });
        clearTimeout(id);
        await safeJson(res);
        out.innerHTML = '‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω –¥–æ —Ç–∞–π–º–∞—É—Ç–∞';
    } catch (err) {
        clearTimeout(id);
        if (err.name === 'AbortError') out.innerHTML = '‚è∞ –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω (—Ç–∞–π–º–∞—É—Ç)';
        else out.innerHTML = `<span class="error">–û—à–∏–±–∫–∞: ${err.message}</span>`;
    }
}

function setupHeadersAndParams() {
    el('fetch-headers').addEventListener('click', fetchWithHeaders);
    el('fetch-auth').addEventListener('click', fetchWithAuth);
    el('fetch-params').addEventListener('click', fetchWithParams);
    el('fetch-timeout').addEventListener('click', fetchWithTimeout);
}

// ----------------- –ó–∞–¥–∞–Ω–∏–µ 4: –û—Ç–≤–µ—Ç—ã -----------------
async function fetchAndCheckStatus() {
    show('response-output', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞... <span class="loading"></span>');
    try {
        const res = await fetch(`${API_BASE}/invalid-endpoint-123`);
        await safeJson(res);
    } catch (err) {
        show('response-output', `–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: ${err.message}`, 'error');
    }
}

async function fetchAndReadHeaders() {
    show('response-output', '–ß—Ç–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤... <span class="loading"></span>');
    try {
        const res = await fetch(`${API_BASE}/posts/1`);
        const headers = [];
        res.headers.forEach((v, k) => headers.push(`${k}: ${v}`));
        show('response-output', `–ó–∞–≥–æ–ª–æ–≤–∫–∏:\n${headers.join('\n')}`, 'success');
    } catch (err) {
        show('response-output', `–û—à–∏–±–∫–∞: ${err.message}`, 'error');
    }
}

async function fetchBlobData() {
    show('response-output', '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... <span class="loading"></span>');
    const imgContainer = el('image-container');
    imgContainer.innerHTML = '';
    try {
        const res = await fetch('https://picsum.photos/300/200');
        const blob = await res.blob();
        const url = URL.createObjectURL(blob);
        show('response-output', `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –¢–∏–ø: ${blob.type}`, 'success');
        const img = document.createElement('img');
        img.src = url;
        img.alt = 'preview';
        img.className = 'image-preview';
        imgContainer.appendChild(img);
    } catch (err) {
        show('response-output', `–û—à–∏–±–∫–∞: ${err.message}`, 'error');
    }
}

async function fetchWithFormData() {
    show('response-output', '–û—Ç–ø—Ä–∞–≤–∫–∞ FormData... <span class="loading"></span>');
    try {
        const fd = new FormData();
        fd.append('title','From FormData');
        fd.append('body','Sample body');
        fd.append('userId','1');
        const blob = new Blob(['test'], { type: 'text/plain' });
        fd.append('file', blob, 'test.txt');

        const res = await fetch(`${API_BASE}/posts`, { method: 'POST', body: fd });
        const data = await safeJson(res);
        show('response-output', `‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ID: ${data.id}`, 'success');
    } catch (err) {
        show('response-output', `–û—à–∏–±–∫–∞: ${err.message}`, 'error');
    }
}

function setupResponseHandling() {
    el('fetch-status').addEventListener('click', fetchAndCheckStatus);
    el('fetch-response-headers').addEventListener('click', fetchAndReadHeaders);
    el('fetch-blob').addEventListener('click', fetchBlobData);
    el('fetch-formdata').addEventListener('click', fetchWithFormData);
}

// ----------------- –ó–∞–¥–∞–Ω–∏–µ 5: –û—à–∏–±–∫–∏ -----------------
async function fetchNetworkError() {
    show('error-output', '–¢–µ—Å—Ç —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏... <span class="loading"></span>');
    try {
        await fetch('https://this-domain-does-not-exist-12345.com/');
        show('error-output', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', 'success');
    } catch (err) {
        show('error-output', `–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${err.message}`, 'error');
    }
}

async function fetchHttpError() {
    show('error-output', '–¢–µ—Å—Ç HTTP –æ—à–∏–±–∫–∏... <span class="loading"></span>');
    try {
        const res = await fetch(`${API_BASE}/posts/9999`);
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        await res.json();
    } catch (err) {
        show('error-output', `HTTP –æ—à–∏–±–∫–∞: ${err.message}`, 'error');
    }
}

async function fetchWithAbort() {
    const out = el('error-output');
    out.innerHTML = '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AbortController...';
    const controller = new AbortController();
    const btn = document.createElement('button');
    btn.className = 'abort-btn';
    btn.textContent = '–û—Ç–º–µ–Ω–∏—Ç—å';
    btn.onclick = () => controller.abort();
    out.appendChild(btn);

    try {
        const res = await fetch(`${API_BASE}/posts`, { signal: controller.signal });
        await safeJson(res);
        out.innerHTML = '–ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω', 'success';
    } catch (err) {
        if (err.name === 'AbortError') out.innerHTML = '–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω';
        else out.innerHTML = `<span class="error">–û—à–∏–±–∫–∞: ${err.message}</span>`;
    }
}

async function fetchWithRetry(url, options = {}, retries = 3) {
    let last;
    for (let i = 0; i < retries; i++) {
        try {
            const res = await fetch(url, options);
            if (!res.ok) throw new Error(`HTTP ${res.status}`);
            return await res.json();
        } catch (err) {
            last = err;
            await new Promise(r => setTimeout(r, 100 * Math.pow(2, i)));
        }
    }
    throw last;
}

function setupErrorHandling() {
    el('fetch-network-error').addEventListener('click', fetchNetworkError);
    el('fetch-http-error').addEventListener('click', fetchHttpError);
    el('fetch-abort').addEventListener('click', fetchWithAbort);
    el('fetch-retry').addEventListener('click', async () => {
        const out = el('error-output');
        out.innerHTML = '–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏...';
        try {
            const data = await fetchWithRetry(`${API_BASE}/posts/1`, {}, 3);
            out.innerHTML = `‚úÖ –£—Å–ø–µ—Ö: ${JSON.stringify(data)}`;
        } catch (err) {
            out.innerHTML = `<span class="error">–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å: ${err.message}</span>`;
        }
    });
}

// ----------------- –ó–∞–¥–∞–Ω–∏–µ 6: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ -----------------
async function fetchWithPromiseAll() {
    show('parallel-output', 'Promise.all ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è... <span class="loading"></span>');
    try {
        const start = Date.now();
        const [user, post, comment] = await Promise.all([
            fetch(`${API_BASE}/users/1`).then(r => r.json()),
            fetch(`${API_BASE}/posts/1`).then(r => r.json()),
            fetch(`${API_BASE}/comments/1`).then(r => r.json())
        ]);
        const elapsed = Date.now() - start;
        show('parallel-output', `‚úÖ –ì–æ—Ç–æ–≤–æ –∑–∞ ${elapsed}ms\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name}\n–ü–æ—Å—Ç: ${post.title}`, 'success');
    } catch (err) {
        show('parallel-output', `–û—à–∏–±–∫–∞: ${err.message}`, 'error');
    }
}

async function fetchWithPromiseRace() {
    show('parallel-output', 'Promise.race ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è... <span class="loading"></span>');
    try {
        const winner = await Promise.race([
            fetch(`${API_BASE}/users/1`).then(r => r.json()),
            fetch(`${API_BASE}/posts/1`).then(r => r.json()),
            fetch(`${API_BASE}/comments/1`).then(r => r.json())
        ]);
        show('parallel-output', `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${JSON.stringify(winner).slice(0,120)}...`, 'success');
    } catch (err) {
        show('parallel-output', `–û—à–∏–±–∫–∞: ${err.message}`, 'error');
    }
}

async function fetchSequentialRequests() {
    const out = el('parallel-output');
    out.innerHTML = '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã...';
    try {
        const user = await (await fetch(`${API_BASE}/users/1`)).json();
        out.innerHTML += `\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name}`;
        const posts = await (await fetch(`${API_BASE}/posts?userId=${user.id}`)).json();
        out.innerHTML += `\n–ü–æ—Å—Ç–æ–≤: ${posts.length}`;
        const comments = await (await fetch(`${API_BASE}/comments?postId=${posts[0]?.id}`)).json();
        out.innerHTML += `\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${comments.length}`;
    } catch (err) {
        out.innerHTML += `\n–û—à–∏–±–∫–∞: ${err.message}`;
    }
}

function setupParallelRequests() {
    el('fetch-promise-all').addEventListener('click', fetchWithPromiseAll);
    el('fetch-promise-race').addEventListener('click', fetchWithPromiseRace);
    el('fetch-sequential').addEventListener('click', fetchSequentialRequests);
}

// ----------------- –ó–∞–¥–∞–Ω–∏–µ 7: –°—Ü–µ–Ω–∞—Ä–∏–∏ -----------------
async function fetchUserWithPosts() {
    show('scenario-output', '–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ—Å—Ç–æ–≤... <span class="loading"></span>');
    try {
        const user = await (await fetch(`${API_BASE}/users/1`)).json();
        const posts = await (await fetch(`${API_BASE}/posts?userId=${user.id}`)).json();
        let html = `<strong>${user.name}</strong>\nEmail: ${user.email}\n–ü–æ—Å—Ç–æ–≤: ${posts.length}\n\n`;
        posts.slice(0,5).forEach((p,i) => html += `${i+1}. ${p.title}\n`);
        show('scenario-output', html, 'success');
    } catch (err) {
        show('scenario-output', `–û—à–∏–±–∫–∞: ${err.message}`, 'error');
    }
}

async function fetchWithSearch() {
    show('scenario-output', '–ü–æ–∏—Å–∫ –ø–æ –ø–æ—Å—Ç–∞–º... <span class="loading"></span>');
    try {
        const posts = await (await fetch(`${API_BASE}/posts`)).json();
        const term = 'qui';
        const found = posts.filter(p => p.title.includes(term) || p.body.includes(term));
        show('scenario-output', `–ù–∞–π–¥–µ–Ω–æ: ${found.length} –ø–æ—Å—Ç–æ–≤ –ø–æ "${term}"`, 'success');
    } catch (err) {
        show('scenario-output', `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${err.message}`, 'error');
    }
}

async function simulateFileUpload() {
    const out = el('scenario-output');
    const progress = el('upload-progress');
    out.innerHTML = '–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏...';
    progress.style.width = '0%';

    try {
        for (let pct=0; pct<=100; pct+=10) {
            progress.style.width = pct + '%';
            out.innerHTML = `–ó–∞–≥—Ä—É–∑–∫–∞: ${pct}%`;
            await new Promise(r => setTimeout(r, 150));
        }

        const fd = new FormData();
        fd.append('file', new Blob(['test content'], { type: 'text/plain' }), 'file.txt');
        fd.append('description', 'simulated upload');

        const res = await fetch(`${API_BASE}/posts`, { method: 'POST', body: fd });
        const data = await safeJson(res);
        out.innerHTML = `–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û—Ç–≤–µ—Ç ID: ${data.id}`;
        setTimeout(() => { progress.style.width = '0%'; }, 1200);
    } catch (err) {
        out.innerHTML = `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${err.message}`;
        progress.style.width = '0%';
    }
}

function createFetchCache() {
    const cache = new Map();
    const TTL = 5 * 60 * 1000;
    return async (url, opts = {}, ttl = TTL) => {
        const key = url + JSON.stringify(opts);
        const entry = cache.get(key);
        if (entry && (Date.now() - entry.ts) < ttl) return entry.data;
        const res = await fetch(url, opts);
        const data = await safeJson(res);
        cache.set(key, { data, ts: Date.now() });
        return data;
    };
}

function setupRealScenarios() {
    const cachedFetch = createFetchCache();
    el('fetch-user-posts').addEventListener('click', fetchUserWithPosts);
    el('fetch-search').addEventListener('click', fetchWithSearch);
    el('fetch-file-upload').addEventListener('click', simulateFileUpload);
    el('fetch-cache').addEventListener('click', async () => {
        const out = el('scenario-output');
        out.innerHTML = '–¢–µ—Å—Ç –∫—ç—à–∞...';
        try {
            const a = await cachedFetch(`${API_BASE}/users/1`);
            out.innerHTML += `\n–ü–µ—Ä–≤—ã–π: ${a.name}`;
            const b = await cachedFetch(`${API_BASE}/users/1`);
            out.innerHTML += `\n–í—Ç–æ—Ä–æ–π (–∫—ç—à): ${b.name}`;
        } catch (err) {
            out.innerHTML += `\n–û—à–∏–±–∫–∞: ${err.message}`;
        }
    });
}

// ----------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è -----------------
function init() {
    setupGetRequests();
    setupCrudRequests();
    setupHeadersAndParams();
    setupResponseHandling();
    setupErrorHandling();
    setupParallelRequests();
    setupRealScenarios();
}

document.addEventListener('DOMContentLoaded', init);
