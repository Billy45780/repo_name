// –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–∑ UI

console.log('–¢–µ—Å—Ç—ã Fetch API –≥–æ—Ç–æ–≤—ã');

async function testGetRequests() {
    console.log('–¢–µ—Å—Ç GET /posts/1');
    try {
        const res = await fetch('https://jsonplaceholder.typicode.com/posts/1');
        if (!res.ok) throw new Error(res.status);
        const data = await res.json();
        console.log('OK:', data.title);
    } catch (err) {
        console.log('–û—à–∏–±–∫–∞ GET:', err.message);
    }
}

async function testPostRequests() {
    console.log('–¢–µ—Å—Ç POST /posts');
    try {
        const res = await fetch('https://jsonplaceholder.typicode.com/posts', {
            method:'POST',
            headers:{ 'Content-Type':'application/json' },
            body: JSON.stringify({ title:'t', body:'b', userId:1 })
        });
        if (!res.ok) throw new Error(res.status);
        const data = await res.json();
        console.log('OK, created ID:', data.id);
    } catch (err) {
        console.log('–û—à–∏–±–∫–∞ POST:', err.message);
    }
}

async function testErrorHandling() {
    console.log('–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫');
    try {
        const res = await fetch('https://jsonplaceholder.typicode.com/invalid-endpoint');
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
    } catch (err) {
        console.log('–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞:', err.message);
    }
}

async function testParallelRequests() {
    console.log('–¢–µ—Å—Ç Promise.all');
    try {
        const [u,p,c] = await Promise.all([
            fetch('https://jsonplaceholder.typicode.com/users/1').then(r => r.json()),
            fetch('https://jsonplaceholder.typicode.com/posts/1').then(r => r.json()),
            fetch('https://jsonplaceholder.typicode.com/comments/1').then(r => r.json())
        ]);
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', u.name, '–ü–æ—Å—Ç:', p.title.slice(0,20));
    } catch (err) {
        console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:', err.message);
    }
}

async function testPromiseRace() {
    console.log('–¢–µ—Å—Ç Promise.race');
    try {
        const winner = await Promise.race([
            fetch('https://jsonplaceholder.typicode.com/users/1').then(r => r.json()),
            fetch('https://jsonplaceholder.typicode.com/posts/1').then(r => r.json())
        ]);
        console.log('–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:', winner.id ? 'User' : 'Post');
    } catch (err) {
        console.log('–û—à–∏–±–∫–∞ race:', err.message);
    }
}

async function testAbortController() {
    console.log('–¢–µ—Å—Ç AbortController');
    const controller = new AbortController();
    const id = setTimeout(() => controller.abort(), 100);
    try {
        await fetch('https://jsonplaceholder.typicode.com/posts', { signal: controller.signal });
        console.log('–ó–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω');
    } catch (err) {
        if (err.name === 'AbortError') console.log('–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω');
        else console.log('–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞:', err.message);
    } finally {
        clearTimeout(id);
    }
}

async function runAllTests() {
    console.log('–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...');
    await testGetRequests();
    await testPostRequests();
    await testErrorHandling();
    await testParallelRequests();
    await testPromiseRace();
    await testAbortController();
    console.log('–í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
}

document.addEventListener('DOMContentLoaded', () => {
    const btn = document.createElement('button');
    btn.className = 'btn';
    btn.textContent = 'üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã Fetch API';
    btn.onclick = runAllTests;
    const container = document.querySelector('.container');
    if (container) container.appendChild(btn);
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Node / Jest, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        testGetRequests,
        testPostRequests,
        testErrorHandling,
        testParallelRequests,
        testPromiseRace,
        testAbortController,
        runAllTests
    };
}
