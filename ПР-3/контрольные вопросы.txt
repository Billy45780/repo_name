1. Специфичность и повторное использование классов и ID

Селектор по ID обладает специфичностью 0-1-0-0, что значительно выше специфичности класса (0-0-1-0). Это означает, что стили, примененные через ID, всегда переопределят стили класса при конфликте. Кроме того, ID должен быть уникальным на странице, что исключает его повторное использование, тогда как классы предназначены для многократного применения к различным элементам.

2. Принцип каскада и порядок применения стилей

Каскад в CSS определяет порядок разрешения конфликтов между правилами. Стили применяются в следующем порядке: сначала браузерные стили, затем пользовательские, потом авторские, и в пределах каждой группы побеждает правило с более высокой специфичностью.
 При равной специфичности действует правило, объявленное позже в коде.

3. Расчет специфичности селекторов

Селектор ul li.important имеет специфичность 0-0-2-2 (два элемента и один класс). Селектор #site-title обладает специфичностью 0-1-0-0 (один ID). Селектор .content > .featured-post имеет специфичность 0-0-2-0 (два класса).

4. Наследуемые и ненаследуемые свойства

Наследуемые свойства включают color, font-family, line-height — они автоматически передаются от родителя к потомку. Ненаследуемые свойства, такие как margin, padding, background, требуют явного указания для каждого элемента.

5. Дочерний селектор и его отличие

Селектор > выбирает только непосредственных потомков, тогда как селектор через пробел находит всех потомков независимо от уровня вложенности. Это позволяет создавать более точные и целевые стилевые правила.

6. Практическое применение псевдоклассов

Псевдокласс :hover обеспечивает визуальную обратную связь при наведении курсора, что используется для интерактивных элементов кнопок и ссылок. :nth-child() позволяет выбирать элементы по их позиции, например, для оформления четных и нечетных строк таблиц или списков.

7. Особенности правила !important

Правило !important обладает наивысшим приоритетом в каскаде, но его чрезмерное применение нарушает предсказуемость стилей и создает сложности при поддержке кода. Его использование оправдано только в исключительных ситуациях, когда необходимо гарантированно переопределить стили.

8. Возможности псевдоэлементов

Псевдоэлементы ::before и ::after создают виртуальные элементы, которые могут содержать текст, изображения или использоваться для декоративных целей. Они расширяют возможности оформления без изменения HTML-структуры документа.

9. Порядок применения при равной специфичности

При одинаковой специфичности селекторов браузер применяет CSS-правила в порядке их объявления в коде — последнее объявленное правило имеет приоритет. Это демонстрирует важность последовательности стилевых правил.

10. Инструменты разработчика для отладки CSS

Инструменты разработчика позволяют инспектировать элементы, анализировать примененные стили, вычисленные значения и наследование свойств. Они предоставляют возможность экспериментировать с изменениями в реальном времени, диагностировать проблемы макета и оптимизировать производительность стилей.